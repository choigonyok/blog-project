apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins
  namespace: devops-system
spec:
  resources:
    requests:
      storage: 8Gi
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nginx
  namespace: 
spec:
  resources:
    requests:
      storage: 8Gi
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: efs-sc
provisioner: efs.csi.aws.com
parameters:
  provisioningMode: efs-ap
  fileSystemId: fs-0685bcddb38e521a6 # change everytime when I create new eks cluster by terraform provisioning
  directoryPerms: "700"
  basePath: "/dynamic_provisioning"
  subPathPattern: ""
  ensureUniqueDirectory: "false" # For sharing data between ASG jenkins pods
  reuseAccessPoint: "false" # optional
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx
  template: 
    metadata:
      labels:
        app.kubernetes.io/name: nginx
      name: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        volumeMounts:
          - name: nginx
            mountPath: /var/jenkins_home
      volumes:
        - name: nginx
          persistentVolumeClaim:
            claimName: nginx
---      
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: devops-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: jenkins
  template: 
    metadata:
      labels:
        app.kubernetes.io/name: jenkins
      name: jenkins
      namespace: devops-system
    spec:
      serviceAccountName: jenkins
      securityContext: # .spec level securityContext
        fsGroup: 1000
      containers:
      - name: jenkins-master
        image: achoistic98/techlog-jenkins
        ports:
        - containerPort: 8080
        - containerPort: 50000
        securityContext: # .spec.containers level securityContext
          runAsUser: 1000
          runAsGroup: 1000
        resources:
          requests:
            memory: "256Mi"
          limits:
            memory: "512Mi"
            cpu: "1000m"
        volumeMounts:
          - name: jenkins
            mountPath: /var/jenkins_home
      volumes:
        - name: jenkins
          persistentVolumeClaim:
            claimName: jenkins
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: devops-system
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "external"
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "instance"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
spec:
  selector:
    app.kubernetes.io/name: jenkins
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: devops-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rb-jenkins
  namespace: devops-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: devops-system